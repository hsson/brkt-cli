{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "A VPC with a pair of public and private subnets.  The pairs of subnets are aligned in separate availability zones allowing you to create highly available applications. A NAT gateway is created into each public subnet and routing is configured so that instances in the private subnet can access the Internet through those NAT gateway. ",
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "BASTIONAMI": "ami-4fffc834"
            },
            "us-east-2": {
                "BASTIONAMI": "ami-ea87a78f"
            },
            "us-west-1": {
                "BASTIONAMI": "ami-3a674d5a"
            },
            "us-west-2": {
                "BASTIONAMI": "ami-aa5ebdd2"
            },
            "eu-west-1": {
                "BASTIONAMI": "ami-ebd02392"
            },
            "eu-central-1": {
                "BASTIONAMI": "ami-657bd20a"
            }
        }
    },
    "Outputs": {
        "PrivateSubnet0": {
            "Description": "SubnetId of a private subnet for 10.1.0.0/22",
            "Value": {
                "Ref": "PrivateSubnet0"
            }
        },
        "PrivateSubnet1": {
            "Description": "SubnetId of a private subnet for 10.1.4.0/22",
            "Value": {
                "Ref": "PrivateSubnet1"
            }
        },
        "PrivateSubnetAvailabilityZone0": {
            "Description": "AZ of the private subnet for 10.1.0.0/22",
            "Value": {
                "Fn::GetAtt": [
                    "PrivateSubnet0",
                    "AvailabilityZone"
                ]
            }
        },
        "PrivateSubnetAvailabilityZone1": {
            "Description": "AZ of the private subnet for 10.1.4.0/22",
            "Value": {
                "Fn::GetAtt": [
                    "PrivateSubnet1",
                    "AvailabilityZone"
                ]
            }
        },
        "VPCId": {
            "Description": "VPCId of the newly created VPC",
            "Value": {
                "Ref": "VPC"
            }
        }
    },
    "Parameters": {
        "SshKeyName": {
            "Default": "AWS::NoValue",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to NAT instances. If not specified no key is used.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "TrustedCidr": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "This network range will be permitted to SSH to your NAT instance",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        }
    },
    "Resources": {
        "AllowSshFromBastionIngressRule": {
            "Properties": {
                "FromPort": "22",
                "GroupId": {
                    "Ref": "InternetClientSG"
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Ref": "BastionSecurityGroup"
                },
                "ToPort": "22"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "NATGateway0EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATGateway1EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATGateway0": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "AttachGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt" : [
                        "NATGateway0EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet0"
                }
            }
        },
        "NATGateway1": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "AttachGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt" : [
                        "NATGateway1EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "Bastion0EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "Bastion0"
                }
            }
        },
        "Bastion1EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "Bastion1"
                }
            }
        },
        "BastionSecurityGroup": {
            "Properties": {
                "GroupDescription": "Controls traffic to our Bastion instances",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "InternetClientSG"
                        },
                        "ToPort": "80"
                    },
                    {
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "InternetClientSG"
                        },
                        "ToPort": "443"
                    },
                    {
                        "FromPort": "123",
                        "IpProtocol": "udp",
                        "SourceSecurityGroupId": {
                            "Ref": "InternetClientSG"
                        },
                        "ToPort": "123"
                    },
                    {
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "InternetClientSG"
                        },
                        "ToPort": "22"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "Bastion0": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "BASTIONAMI"
                    ]
                },
                "InstanceType": "t2.small",
                "KeyName": {
                    "Ref": "SshKeyName"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "BastionSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet0"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Bastion0"
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
        },
        "Bastion1": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "BASTIONAMI"
                    ]
                },
                "InstanceType": "t2.small",
                "KeyName": {
                    "Ref": "SshKeyName"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "BastionSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Bastion1"
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
        },
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InstanceAutoRecoveryBastion0": {
            "Properties": {
                "ActionsEnabled": "true",
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "AlarmDescription": "Recover failed instance",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "Bastion0"
                        }
                    }
                ],
                "EvaluationPeriods": 2,
                "MetricName": "StatusCheckFailed_System",
                "Namespace": "AWS/EC2",
                "Period": 60,
                "Statistic": "Average",
                "Threshold": "0"
            },
             "Type": "AWS::CloudWatch::Alarm"
        },
        "InstanceAutoRecoveryBastion1": {
            "Properties": {
                "ActionsEnabled": "true",
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "AlarmDescription": "Recover failed instance",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "Bastion1"
                        }
                    }
                ],
                "EvaluationPeriods": 2,
                "MetricName": "StatusCheckFailed_System",
                "Namespace": "AWS/EC2",
                "Period": 60,
                "Statistic": "Average",
                "Threshold": "0"
            },
             "Type": "AWS::CloudWatch::Alarm"
        },
        "InternetClientSG": {
            "Properties": {
                "GroupDescription": "Instances in this group may access Internet through NAT",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "PrivateAllowBrktOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "7001",
                    "To": "7002"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "140"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowHTTPOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "110"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowHTTPSOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowNTPOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "130"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowNTPResponsesIn": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "120"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowSSHConnectionsIn": {
            "Properties": {
                "CidrBlock": "10.1.0.0/20",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "110"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowTCPResponsesIn": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateAllowTCPResponsesOut": {
            "Properties": {
                "CidrBlock": "10.1.0.0/20",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "120"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Private",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PrivateRoute0": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway0"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable0"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRoute1": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRouteTable0": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "VPN Connected Subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateRouteTable1": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "VPN Connected Subnet"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PrivateSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "PublicSubnet0",
                        "AvailabilityZone"
                    ]
                },
                "CidrBlock": "10.1.0.0/22",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Private",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "PublicSubnet1",
                        "AvailabilityZone"
                    ]
                },
                "CidrBlock": "10.1.4.0/22",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Private",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateSubnetNetworkAclAssociation0": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet0"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PrivateSubnetNetworkAclAssociation1": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PrivateSubnetRouteTableAssociation0": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable0"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet0"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PrivateSubnetRouteTableAssociation1": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable1"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicAllowBrktIn": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "7001",
                    "To": "7002"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "150"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowBrktOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "7001",
                    "To": "7002"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "150"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowHTTPOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "110"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowHTTPSOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowHTTPSThrough": {
            "Properties": {
                "CidrBlock": "10.1.0.0/20",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "120"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowHTTPThrough": {
            "Properties": {
                "CidrBlock": "10.1.0.0/20",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "130"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowNTPOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "140"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowNTPResponsesIn": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "140"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowSSHIn": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "TrustedCidr"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "110"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowSSHToPrivateInstances": {
            "Properties": {
                "CidrBlock": "10.1.0.0/20",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "130"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowTCPResponsesIn": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicAllowTCPResponsesOut": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "120"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PublicNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Public",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PublicRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Public",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.1.8.0/24",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Public",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.1.9.0/24",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Public",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetNetworkAclAssociation0": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet0"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicSubnetNetworkAclAssociation1": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicSubnetRouteTableAssociation0": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet0"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicSubnetRouteTableAssociation1": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Route": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "10.1.0.0/20",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "VPN Connected VPC"
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "s3VpcEndpoint": {
            "Properties": {
                "RouteTableIds": [
                    {
                        "Ref": "PublicRouteTable"
                    },
                    {
                        "Ref": "PrivateRouteTable0"
                    },
                    {
                        "Ref": "PrivateRouteTable1"
                    }
                ],
                "ServiceName": {
                    "Fn::Join": [
                        "",
                        [
                            "com.amazonaws.",
                            {
                                "Ref": "AWS::Region"
                            },
                            ".s3"
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCEndpoint"
        }
    }
}
